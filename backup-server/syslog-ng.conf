@version: 3.38
@include "scl.conf"
@define backupsrv_logs_path "/backup/backupsrv/logs"


# Syslog-ng configuration file, compatible with default Debian syslogd
# installation.

# First, set some global options.
options { chain_hostnames(off); flush_lines(0); use_dns(persist_only); use_fqdn(no);
	  dns_cache(yes); dns-cache-hosts(/etc/hosts); owner("root"); group("root"); perm(0640);
	  stats_freq(0); bad_hostname("^gconfd$"); 
};

########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src {
       system();
       internal();
};

# If you wish to get logs from remote machine you should uncomment
# this and comment the above source line.

#source s_net { tcp(ip(127.0.0.1) port(1000)); };
# [TODO] enable client certificate authentication (add CA file for this and remove peer-verify(optional-untrusted))
# ca-file("/etc/syslog-ng/ssl/certs/cacert.pem")
source s_net_tls {
    network(ip(10.0.0.4) port(6514)
        transport("tls")
        tls( key-file("/etc/syslog-ng/ssl/private/logging-rsyslog.key")
             cert-file("/etc/syslog-ng/ssl/certs/logging-rsyslog.crt")
             peer-verify(optional-untrusted)
             )
    ); 
};


########################
# Destinations
########################
# First some standard logfile
#
destination d_auth { file("`backupsrv_logs_path`/auth.log"); };
destination d_cron { file("`backupsrv_logs_path`/cron.log"); };
destination d_daemon { file("`backupsrv_logs_path`/daemon.log"); };
destination d_kern { file("`backupsrv_logs_path`/kern.log"); };
destination d_lpr { file("`backupsrv_logs_path`/lpr.log"); };
destination d_mail { file("`backupsrv_logs_path`/mail.log"); };
destination d_syslog { file("`backupsrv_logs_path`/syslog"); };
destination d_user { file("`backupsrv_logs_path`/user.log"); };
destination d_uucp { file("`backupsrv_logs_path`/uucp.log"); };

# This files are the log come from the mail subsystem.
#
destination d_mailinfo { file("`backupsrv_logs_path`/mail.info"); };
destination d_mailwarn { file("`backupsrv_logs_path`/mail.warn"); };
destination d_mailerr { file("`backupsrv_logs_path`/mail.err"); };

# Logging for INN news system
#
destination d_newscrit { file("`backupsrv_logs_path`/news/news.crit"); };
destination d_newserr { file("`backupsrv_logs_path`/news/news.err"); };
destination d_newsnotice { file("`backupsrv_logs_path`/news/news.notice"); };

# Some 'catch-all' logfiles.
#
destination d_debug { file("`backupsrv_logs_path`/debug"); };
destination d_error { file("`backupsrv_logs_path`/error"); };
destination d_messages { file("`backupsrv_logs_path`/messages"); };

# The root's console.
#
destination d_console { usertty("root"); };

# Virtual console.
#
destination d_console_all { getvirtconsole(); };

# The named pipe /dev/xconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
destination d_xconsole { pipe("/dev/xconsole"); };

# Send the messages to an other host
#
#destination d_net { tcp("127.0.0.1" port(1000) log_fifo_size(1000)); };

# Debian only
destination d_ppp { file("`backupsrv_logs_path`/ppp.log"); };

# Destination of remote messages
destination remote_messages { 
	file(
		"/backup/$HOST/logs/$PROGRAM"
		create_dirs(yes)
	); 
};

########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which 
# message go where.

filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };

filter f_debug { level(debug) and not facility(auth, authpriv, news, mail); };
filter f_error { level(err .. emerg) ; };
filter f_messages { level(info,notice,warn) and 
                    not facility(auth,authpriv,cron,daemon,mail,news); };

filter f_auth { facility(auth, authpriv) and not filter(f_dbg); };
filter f_cron { facility(cron) and not filter(f_dbg); };
filter f_daemon { facility(daemon) and not filter(f_dbg); };
filter f_kern { facility(kern) and not filter(f_dbg); };
filter f_lpr { facility(lpr) and not filter(f_dbg); };
filter f_local { facility(local0, local1, local3, local4, local5,
                        local6, local7) and not filter(f_dbg); };
filter f_mail { facility(mail) and not filter(f_dbg); };
filter f_news { facility(news) and not filter(f_dbg); };
filter f_syslog3 { not facility(auth, authpriv, mail) and not filter(f_dbg); };
filter f_user { facility(user) and not filter(f_dbg); };
filter f_uucp { facility(uucp) and not filter(f_dbg); };

filter f_cnews { level(notice, err, crit) and facility(news); };
filter f_cother { level(debug, info, notice, warn) or facility(daemon, mail); };

filter f_ppp { facility(local2) and not filter(f_dbg); };
filter f_console { level(warn .. emerg); };

########################
# Log paths
########################
log { source(s_src); filter(f_auth); destination(d_auth); };
log { source(s_src); filter(f_cron); destination(d_cron); };
log { source(s_src); filter(f_daemon); destination(d_daemon); };
log { source(s_src); filter(f_kern); destination(d_kern); };
log { source(s_src); filter(f_lpr); destination(d_lpr); };
log { source(s_src); filter(f_syslog3); destination(d_syslog); };
log { source(s_src); filter(f_user); destination(d_user); };
log { source(s_src); filter(f_uucp); destination(d_uucp); };

log { source(s_src); filter(f_mail); destination(d_mail); };
#log { source(s_src); filter(f_mail); filter(f_info); destination(d_mailinfo); };
#log { source(s_src); filter(f_mail); filter(f_warn); destination(d_mailwarn); };
#log { source(s_src); filter(f_mail); filter(f_err); destination(d_mailerr); };

log { source(s_src); filter(f_news); filter(f_crit); destination(d_newscrit); };
log { source(s_src); filter(f_news); filter(f_err); destination(d_newserr); };
log { source(s_src); filter(f_news); filter(f_notice); destination(d_newsnotice); };
#log { source(s_src); filter(f_cnews); destination(d_console_all); };
#log { source(s_src); filter(f_cother); destination(d_console_all); };

#log { source(s_src); filter(f_ppp); destination(d_ppp); };

log { source(s_src); filter(f_debug); destination(d_debug); };
log { source(s_src); filter(f_error); destination(d_error); };
log { source(s_src); filter(f_messages); destination(d_messages); };

log { source(s_src); filter(f_console); destination(d_console_all); destination(d_xconsole); };
log { source(s_src); filter(f_crit); destination(d_console); };

# All messages send to a remote site
#
#log { source(s_src); destination(d_net); };

# Store remote messages
log { source(s_net_tls); destination(remote_messages); };

###
# Include all config files in /etc/syslog-ng/conf.d/
###
@include "/etc/syslog-ng/conf.d/*.conf"
